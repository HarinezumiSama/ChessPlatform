<#
/*
    This template result file must be regenerated in Visual Studio when ChessPlatform.Logging.LogEntryType is changed.
*/
#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".Generated.cs" #>
// <auto-generated>
//     This code was generated by T4 template.
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

#nullable enable

using System;
using Omnifactotum.Annotations;

namespace ChessPlatform.Logging
{
    /// <summary>
    ///     Contains extension methods for <see cref="ILogger"/>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode(@"T4 Template", @"Current")]
    public static partial class LoggerExtensions
    {
    <# 
        // Tuples having LogEntryType enum value as Item1 and corresponding extension method name as Item2
        var pairs = new Tuple<string, string>[]
        {
            Tuple.Create(@"Audit", @"Audit"),
            Tuple.Create(@"Fatal", @"Fatal"),
            Tuple.Create(@"Error", @"Error"),
            Tuple.Create(@"Warning", @"Warn"),
            Tuple.Create(@"Information", @"Info"),
            Tuple.Create(@"Verbose", @"Verbose")
        };

        for (var index = 0; index < pairs.Length; index++)
        {
            var pair = pairs[index];

            if (index != 0)
            {
                #>

    <#
            }
        #>    public static void <#= pair.Item2 #>(this ILogger logger, object message, [CanBeNull] Exception? exception = null)
            => (logger ?? throw new ArgumentNullException(nameof(logger)))
                .Write(LogEntryType.<#= pair.Item1 #>, message, exception);

        public static void <#= pair.Item2 #>(this ILogger logger, Func<object> createMessage, [CanBeNull] Exception? exception = null)
            => (logger ?? throw new ArgumentNullException(nameof(logger)))
                .Write(
                    LogEntryType.<#= pair.Item1 #>,
                    createMessage ?? throw new ArgumentNullException(nameof(createMessage)),
                    exception);
    <#}#>}
}