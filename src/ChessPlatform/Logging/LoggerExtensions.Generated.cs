// <auto-generated>
//     This code was generated by T4 template.
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

#nullable enable

using System;
using Omnifactotum.Annotations;

namespace ChessPlatform.Logging
{
    /// <summary>
    ///     Contains extension methods for <see cref="ILogger"/>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode(@"T4 Template", @"Current")]
    public static partial class LoggerExtensions
    {
        public static void Audit(this ILogger logger, object message, [CanBeNull] Exception? exception = null)
            => (logger ?? throw new ArgumentNullException(nameof(logger)))
                .Write(LogEntryType.Audit, message, exception);

        public static void Audit(this ILogger logger, Func<object> createMessage, [CanBeNull] Exception? exception = null)
            => (logger ?? throw new ArgumentNullException(nameof(logger)))
                .Write(
                    LogEntryType.Audit,
                    createMessage ?? throw new ArgumentNullException(nameof(createMessage)),
                    exception);
    
        public static void Fatal(this ILogger logger, object message, [CanBeNull] Exception? exception = null)
            => (logger ?? throw new ArgumentNullException(nameof(logger)))
                .Write(LogEntryType.Fatal, message, exception);

        public static void Fatal(this ILogger logger, Func<object> createMessage, [CanBeNull] Exception? exception = null)
            => (logger ?? throw new ArgumentNullException(nameof(logger)))
                .Write(
                    LogEntryType.Fatal,
                    createMessage ?? throw new ArgumentNullException(nameof(createMessage)),
                    exception);
    
        public static void Error(this ILogger logger, object message, [CanBeNull] Exception? exception = null)
            => (logger ?? throw new ArgumentNullException(nameof(logger)))
                .Write(LogEntryType.Error, message, exception);

        public static void Error(this ILogger logger, Func<object> createMessage, [CanBeNull] Exception? exception = null)
            => (logger ?? throw new ArgumentNullException(nameof(logger)))
                .Write(
                    LogEntryType.Error,
                    createMessage ?? throw new ArgumentNullException(nameof(createMessage)),
                    exception);
    
        public static void Warn(this ILogger logger, object message, [CanBeNull] Exception? exception = null)
            => (logger ?? throw new ArgumentNullException(nameof(logger)))
                .Write(LogEntryType.Warning, message, exception);

        public static void Warn(this ILogger logger, Func<object> createMessage, [CanBeNull] Exception? exception = null)
            => (logger ?? throw new ArgumentNullException(nameof(logger)))
                .Write(
                    LogEntryType.Warning,
                    createMessage ?? throw new ArgumentNullException(nameof(createMessage)),
                    exception);
    
        public static void Info(this ILogger logger, object message, [CanBeNull] Exception? exception = null)
            => (logger ?? throw new ArgumentNullException(nameof(logger)))
                .Write(LogEntryType.Information, message, exception);

        public static void Info(this ILogger logger, Func<object> createMessage, [CanBeNull] Exception? exception = null)
            => (logger ?? throw new ArgumentNullException(nameof(logger)))
                .Write(
                    LogEntryType.Information,
                    createMessage ?? throw new ArgumentNullException(nameof(createMessage)),
                    exception);
    
        public static void Verbose(this ILogger logger, object message, [CanBeNull] Exception? exception = null)
            => (logger ?? throw new ArgumentNullException(nameof(logger)))
                .Write(LogEntryType.Verbose, message, exception);

        public static void Verbose(this ILogger logger, Func<object> createMessage, [CanBeNull] Exception? exception = null)
            => (logger ?? throw new ArgumentNullException(nameof(logger)))
                .Write(
                    LogEntryType.Verbose,
                    createMessage ?? throw new ArgumentNullException(nameof(createMessage)),
                    exception);
    }
}